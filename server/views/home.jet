<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebSocket Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .chat-container {
            height: 100vh;
            padding: 20px 0;
        }
        .chat-messages {
            height: 500px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            background-color: white;
            margin-bottom: 15px;
        }
        .online-users {
            height: 500px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            background-color: white;
        }
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 70%;
        }
        .message.own {
            background-color: #007bff;
            color: white;
            margin-left: auto;
            text-align: right;
        }
        .message.other {
            background-color: #e9ecef;
            color: #333;
        }
        .user-item {
            padding: 8px 12px;
            border-radius: 8px;
            margin-bottom: 5px;
            background-color: #f8f9fa;
            border-left: 4px solid #28a745;
        }
        .connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div class="connection-status">
        <div id="connectionBadge" class="badge bg-warning">Connecting...</div>
    </div>

    <div class="container-fluid chat-container">
        <div class="row h-100">
            <!-- Chat Column -->
            <div class="col-md-8">
                <div class="card h-100">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">
                            <i class="bi bi-chat-dots"></i> Chat Room
                        </h4>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <!-- Messages Area -->
                        <div id="chatMessages" class="chat-messages flex-grow-1">
                            <div class="text-center text-muted">
                                <i class="bi bi-chat-square-text fs-1"></i>
                                <p>Welcome to the chat! Start a conversation...</p>
                            </div>
                        </div>
                        
                        <!-- Message Input -->
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." maxlength="500">
                            <button class="btn btn-primary" type="button" id="sendButton">
                                <i class="bi bi-send"></i> Send
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Online Users Column -->
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0">
                            <i class="bi bi-people"></i> Online Users <span id="userCount" class="badge bg-light text-success">0</span>
                        </h4>
                    </div>
                    <div class="card-body">
                        <div id="onlineUsers" class="online-users">
                            <div class="text-center text-muted">
                                <i class="bi bi-person-plus fs-1"></i>
                                <p>Waiting for users to join...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div></body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q" crossorigin="anonymous"></script>
<script>
    let socket = null;
    let username = null;

    document.addEventListener("DOMContentLoaded", function(){
        // Ask for username
        username = prompt("Enter your username:") || "Anonymous";
        
        initializeWebSocket();
        setupEventListeners();
    });

    function initializeWebSocket() {
        const connectionBadge = document.getElementById('connectionBadge');
        
        socket = new WebSocket("ws://127.0.0.1:8080/ws");

        socket.onopen = () => {
            console.log("Successfully connected");
            connectionBadge.className = "badge bg-success";
            connectionBadge.textContent = "Connected";
            
            // Send join message
            sendMessage({
                type: "join",
                username: username,
                timestamp: new Date().toISOString()
            });
        };

        socket.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                handleIncomingMessage(data);
            } catch (e) {
                console.error("Error parsing message:", e);
            }
        };

        socket.onclose = () => {
            console.log("Connection closed");
            connectionBadge.className = "badge bg-danger";
            connectionBadge.textContent = "Disconnected";
        };

        socket.onerror = (error) => {
            console.error("WebSocket error:", error);
            connectionBadge.className = "badge bg-danger";
            connectionBadge.textContent = "Error";
        };
    }

    function setupEventListeners() {
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');

        // Send message on button click
        sendButton.addEventListener('click', () => {
            sendChatMessage();
        });

        // Send message on Enter key press
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });
    }

    function sendChatMessage() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput.value.trim();
        
        if (message && socket && socket.readyState === WebSocket.OPEN) {
            sendMessage({
                type: "message",
                username: username,
                message: message,
                timestamp: new Date().toISOString()
            });
            messageInput.value = '';
        }
    }

    function sendMessage(data) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(data));
        }
    }

    function handleIncomingMessage(data) {
        switch (data.type) {
            case "message":
                displayChatMessage(data);
                break;
            case "user_joined":
                displaySystemMessage(`${data.username} joined the chat`);
                updateOnlineUsers(data.users);
                break;
            case "user_left":
                displaySystemMessage(`${data.username} left the chat`);
                updateOnlineUsers(data.users);
                break;
            case "users_list":
                updateOnlineUsers(data.users);
                break;
            default:
                console.log("Unknown message type:", data);
        }
    }

    function displayChatMessage(data) {
        const messagesContainer = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        
        const isOwnMessage = data.username === username;
        messageDiv.className = `message ${isOwnMessage ? 'own' : 'other'}`;
        
        const timestamp = new Date(data.timestamp).toLocaleTimeString();
        
        if (isOwnMessage) {
            messageDiv.innerHTML = `
                <div>${data.message}</div>
                <small class="opacity-75">${timestamp}</small>
            `;
        } else {
            messageDiv.innerHTML = `
                <strong>${data.username}</strong>
                <div>${data.message}</div>
                <small class="opacity-75">${timestamp}</small>
            `;
        }
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Remove welcome message if it exists
        const welcomeMessage = messagesContainer.querySelector('.text-center');
        if (welcomeMessage) {
            welcomeMessage.remove();
        }
    }

    function displaySystemMessage(message) {
        const messagesContainer = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'text-center text-muted small mb-2';
        messageDiv.innerHTML = `<em>${message}</em>`;
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function updateOnlineUsers(users) {
        const onlineUsersContainer = document.getElementById('onlineUsers');
        const userCountBadge = document.getElementById('userCount');
        
        if (!users || users.length === 0) {
            onlineUsersContainer.innerHTML = `
                <div class="text-center text-muted">
                    <i class="bi bi-person-plus fs-1"></i>
                    <p>Waiting for users to join...</p>
                </div>
            `;
            userCountBadge.textContent = '0';
            return;
        }
        
        userCountBadge.textContent = users.length;
        
        onlineUsersContainer.innerHTML = users.map(user => `
            <div class="user-item">
                <i class="bi bi-person-circle me-2"></i>
                <strong>${user}</strong>
                ${user === username ? '<span class="badge bg-primary ms-2">You</span>' : ''}
            </div>
        `).join('');
    }
</script>
</html>